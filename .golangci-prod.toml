# Configuration for golangci-lint
# See https://golangci-lint.run/usage/configuration/#config-file

# Configuration updated for golangci-lint v1.35.2

# See https://golangci-lint.run/usage/linters/
[linters]
  # Disable-all coupled with enable scales well with updates to golangci-lint
  disable-all = true

  enable = [
    # https://golang.org/cmd/vet/
    # Examines Go source code and reports suspicious constructs.
    "govet",

    # https://github.com/kisielk/errcheck
    # Checks for unchecked errors in go programs.
    "errcheck",

    # https://staticcheck.io/
    # Staticcheck is a go vet on steroids, applying a ton of static analysis checks.
    "staticcheck",

    # https://github.com/dominikh/go-tools/tree/master/unused
    # Checks Go code for unused constants, variables, functions and types.
    "unused", # prod only

    # https://github.com/dominikh/go-tools/tree/master/unused
    # Suggests simplifications for code.
    "gosimple",

    # https://github.com/gordonklaus/ineffassign
    # Detects when assignments to existing variables are not used.
    "ineffassign",

    # https://github.com/opennota/check
    # Finds unused struct fields.
    "structcheck", # prod only

    # https://github.com/dominikh/go-tools/tree/master/stylecheck
    # Similar to and replacement for golint - prints out style mistakes.
    "stylecheck",

    # https://github.com/securego/gosec
    # Inspects source code for security problems.
    "gosec", # prod only

    # https://github.com/mdempsky/unconvert
    # Removes unnecessary type conversions.
    "unconvert",

    # https://github.com/mibk/dupl
    # Detects duplication in code blocks.
    "dupl",

    # https://github.com/jgautheron/goconst
    # Finds repeated strings that could be replaced by a constant.
    "goconst",

    # https://github.com/daixiang0/gci
    # Gci control golang package import order and make it always deterministic.
    "gci",

    # https://github.com/golang/lint
    # Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes
    "golint",

    # https://github.com/mvdan/gofumpt
    # Gofumpt checks whether code was gofumpt-ed.
    "gofumpt",

    # https://github.com/client9/misspell
    # Finds commonly misspelled English words in comments.
    "misspell",

    # https://github.com/mvdan/unparam
    # Reports unused function parameters.
    "unparam", # prod only

    # https://github.com/alexkohler/nakedret
    # Finds naked returns in functions greater than a specified function length.
    "nakedret",

    # https://github.com/uudashr/gocognit
    # Computes and checks the cognitive complexity of functions
    "gocognit", # prod only

    # https://github.com/walle/lll
    # Reports long lines
    "lll",

    # https://github.com/golangci/golangci-lint/blob/master/pkg/golinters/nolintlint/README.md
    # Reports ill-formed or insufficient nolint directives
    "nolintlint", # prod only
  ]

# Options for analysis running
[run]
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout = "10m"

  # Which dirs to skip: issues from them won't be reported;
  # can use regexp here: generated.*, regexp is applied on full path;
  # By default, directories such as `vendor/` are skipped independently from this
  # option's value.
  skip-dirs = [
    "\\.go",
    "\\.golangci-lint-cache",
    "bin",
    "resources",
  ]

  skip-files = [
    ".*mock.*\\.go$"
  ]

  # golangci-lint passes it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any
  # changes to go.mod are needed. This setting is most useful to check that
  # go.mod does not need updates, such as in a continuous integration and testing
  # system. If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores the dependency
  # descriptions in go.mod.
  modules-download-mode = "readonly"

# All available settings of specific linters
[linters-settings]

  [linters-settings.govet]
    # Report about shadowed variables
    check-shadowing = true

    enable-all = true
    # Disable analyzers by name
    # See https://golang.org/cmd/vet/
    disable = [
      # (not needed) report mismatches between assembly files and Go declarations
      "asmdecl",
      # (dupl staticcheck) check for useless assignments
      "assign",
    ]

  [linters-settings.errcheck]
    # Report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions = true

  [linters-settings.gci]
    # Section configuration to compare against.
    # Section names are case-insensitive and may contain parameters in ().
    # The default order of sections is `standard > default > custom > blank > dot`,
    # If `custom-order` is `true`, it follows the order of `sections` option.
    # Default: ["standard", "default"]
    sections = [
      "standard", # Standard section: captures all standard packages.
      "default", # Default section: contains all imports that could not be matched to another section type.
      "prefix(github.com/sudo-suhas/play-script-engine)" # Custom section: groups all imports with the specified Prefix.
    ]

  [linters-settings.unparam]
    check-exported = true

  [linters-settings.unused]
    check-exported = true

  [linters-settings.misspell]
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale = "US"
    ignore-words = [
      "cancelled"
    ]

  [linters-settings.gofumpt]
    # Choose whether or not to use the extra rules that are disabled
    # by default
    extra-rules = true

  [linters-settings.lll]
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length = 160
    # tab width in spaces. Default to 1.
    tab-width = 1

  [linters-settings.nolintlint]
    # Disable to ensure that nolint directives don't have a leading space. Default is true.
    allow-leading-space = false
    # Enable to require an explanation of nonzero length after each nolint directive. Default is false.
    require-explanation = false
    # Enable to require nolint directives to mention the specific linter being suppressed. Default is false.
    require-specific = true

[issues]
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  exclude=[
    'declaration of "(err|ctx)" shadows declaration at',
  ]
